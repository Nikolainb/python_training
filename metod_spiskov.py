# Список - упорядоченное коллекция данных, у каждого элемента этого списка есть свой индекс
# и по этому индексу мы можем обращаться к его элементу списка. В отличие от строк списки относятся к изменяемым спискам данных
# списки могут содержать разные типы данных, а также списки внутри списков
a = ["Москва", "Воронеж", "Тверь"]
print(a)

marks = [10, 9, 8, 7, 6, 5]
print(marks)

print(marks[0]) # вывести первый элемент списка, или какой нужно
print((marks[0]+ marks[1]+ marks[2]+ marks[3]+ marks[4]+ marks[5])/6)  # посчитали среднее арифмитическое
print(marks[-1]) # вывести последний элемент списка
marks[0] = 100 # изменили первое значение элемента списка
print(marks)

marks[2] = 'удовлетворительно' # изменили первое значение элемента списка
print(marks)


# списко может быть пустым. Список можно создать через функцию list()
b = list()
print(b)

c = list([1,34,5234,234,24234,234,124])
print(c)

print(len(marks)) # функция len() возвращает количество элементов списка
print(min(c)) # функция min() возвращает минимальное значение списка
print(max(c)) # функция max() возвращает максимальнок значение списка
print(sum(c)) # функция sum() возвращает сумму списка
print(sum(c)/len(c)) # посчитали среднее арифмитическое значение
print(sorted(c)) # сортировка списка
print(sorted(c, reverse=True)) # сортировка списка в обратном порядке


#Списки можно объединять, умножать , увеличивая количетсво
d = [1,2,3,4,5,6,7,8,9]
e = [1,39,23,12,2]
f = d + e
print(f)
print(e*3)


# Для того чтобы понять входит ли в список какое то значение используется оператор in
lst =["Москва", 1232, 5.3, True, False, "Воронеж", "Тверь"]
print(1232 in lst)

# так можно удалять элементы из списка оператором del
print( del lst[2])


#Для создания списка в Python мы используем квадратные скобки [] и разделяем элементы запятой. Например:
numbers = [1, 2, 3, 4, 5]
fruits = ["яблоко", "банан", "апельсин"]
mixed = [1, "два", 3.0, True]

# Мы можем обращаться к элементам списка по их индексу. Индексация начинается с 0. Например:
fruits = ["яблоко", "банан", "апельсин"]
print(fruits[0])  # Вывод: "яблоко"
print(fruits[1])  # Вывод: "банан"

# Мы можем изменять элементы списка, присваивая им новые значения по индексу. Например:
fruits = ["яблоко", "банан", "апельсин"]
fruits[1] = "киви"
print(fruits)  # Вывод: ["яблоко", "киви", "апельсин"]


# Мы можем узнать длину списка с помощью функции len(), которая возвращает количество элементов в списке. Например:
fruits = ["яблоко", "банан", "апельсин"]
length = len(fruits)
print(length)  # Вывод: 3

# Мы можем добавлять новый элемент в конец списка с помощью метода append(). Например:
fruits = ["яблоко", "банан", "апельсин"]
fruits.append("груша")
print(fruits)  # Вывод: ["яблоко", "банан", "апельсин", "груша"]

# Мы можем удалить элемент из списка с помощью метода remove() или оператора del. Например:
fruits = ["яблоко", "банан", "апельсин"]
fruits.remove("банан")
print(fruits)  # Вывод: ["яблоко", "апельсин"]

del fruits[0]
print(fruits)  # Вывод: ["апельсин"]


# Мы можем получить срез списка, выбрав определенный диапазон элементов.
# Для этого используется синтаксис [start:stop:step], где start - индекс начала среза,
# stop - индекс конца среза (не включается), step - шаг. Например:
numbers = [1, 2, 3, 4, 5]
print(numbers[1:4])  # Вывод: [2, 3, 4]
print(numbers[::2])  # Вывод: [1, 3, 5]

# Списки поддерживают различные операции, такие как
# объединение (+), повторение (*) и проверка вхождения (in). Например:
list1 = [1, 2, 3]
list2 = [4, 5, 6]
combined = list1 + list2
repeated = list1 * 3
print(combined)  # Вывод: [1, 2, 3, 4, 5, 6]
print(repeated)  # Вывод: [1, 2, 3, 1, 2, 3, 1, 2, 3]
print(2 in list1)  # Вывод: True


# Списки имеют ряд встроенных методов, которые позволяют выполнять различные операции с ними.
# Некоторые из них включают append(), insert(), pop(), index(), sort() и другие. Например:
fruits = ["яблоко", "банан", "апельсин"]
fruits.append("груша")
fruits.insert(1, "киви")
fruits.pop(2)
index = fruits.index("банан")
fruits.sort()
print(fruits)  # Вывод: ["апельсин", "груша", "яблоко"]
print(index)  # Вывод: 1

# При копировании списка важно понимать, что простое присваивание создает ссылку на оригинальный список,
# а не новую копию. Для создания независимой копии списка можно использовать метод copy() или срезы. Например:
list1 = [1, 2, 3]
list2 = list1.copy()
list3 = list1[:]

# В Python списки могут содержать другие списки в качестве элементов.
# Это позволяет создавать структуры данных с разными уровнями вложенности
# и предоставляет более сложные структуры для хранения данных.
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(matrix[1][2])  # Вывод: 6


# Функция range() позволяет генерировать последовательность чисел.
# Мы можем использовать ее для создания списка с определенной последовательностью чисел.
numbers = list(range(1, 6))
print(numbers)  # Вывод: [1, 2, 3, 4, 5]

u, i, l = list(map(int, input().split()))

print(u, i, l)
z =list(u, i, l)
print(z)