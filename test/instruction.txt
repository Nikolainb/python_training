Чтобы клонировать репозиторий с GitHub в PyCharm и выбрать определенную ветку, выполните следующие шаги:
Откройте PyCharm и выберите "Checkout from Version Control" (или аналогичную опцию, в зависимости от версии PyCharm).
В появившемся окне выберите "Git".
Введите URL репозитория GitHub в поле "URL". Например, "https://github.com/username/repository.git".
Укажите путь к локальной директории, где хотите сохранить клонированный репозиторий.
Установите галочку возле опции "Specify Git Repository Location" и укажите путь к Git, если он не
установлен по умолчанию.
Щелкните на кнопке "Clone".
После того, как репозиторий склонирован, выберите ветку, которую хотите использовать.
Для этого щелкните на кнопке "Git" в правом нижнем углу PyCharm.
В открывшемся окне выберите "Branches".
Выберите нужную ветку из списка.
Щелкните на кнопке "Checkout" рядом с выбранной веткой.
Теперь у вас должен быть склонированный репозиторий с выбранной веткой в PyCharm.
Вы можете приступить к работе с кодом проекта.

Чтобы связать PyCharm с GitHub, выполните следующие шаги:
Откройте проект в PyCharm, с которым вы хотите связать GitHub.
В верхнем меню выберите "File" (Файл) -> "Settings" (Настройки) (или "Preferences" для macOS).
В окне настроек выберите "Version Control" (Контроль версий) -> "GitHub".
Нажмите на кнопку "Add account" (Добавить аккаунт).
В появившемся диалоговом окне выберите "Login with Token" (Войти с помощью токена)
или "Login with GitHub" (Войти с помощью GitHub) и следуйте инструкциям для аутентификации и авторизации вашего GitHub аккаунта.
После успешной аутентификации вы увидите список ваших GitHub репозиториев.
Выберите репозиторий, к которому вы хотите получить доступ в PyCharm, и нажмите на кнопку "Clone" (Клонировать).
Теперь вы связали свой проект в PyCharm с репозиторием GitHub.
Вы сможете использовать функции контроля версий, такие как коммиты, пуллы, пушы и синхронизацию с GitHub прямо из PyCharm.


Конечно, я объясню более подробно, как запустить проект с GitHub, используя командную строку в PyCharm. Вот пошаговая инструкция:
Откройте PyCharm и создайте новый проект, выбрав "Create New Project" (Создать новый проект)
или откройте существующий проект, если он уже существует.
Внизу окна PyCharm вы увидите вкладку "Terminal" (Терминал).
Нажмите на нее, чтобы открыть командную строку.
В командной строке перейдите в папку, где хотите разместить проект.
Вы можете использовать команду cd <путь к папке>, чтобы перейти в нужную папку.
Например, если вы хотите разместить проект в папке "Projects", выполните команду cd Projects.
После того как вы находитесь в нужной папке,
выполните команду git clone <URL репозитория>, чтобы склонировать репозиторий.
Замените <URL репозитория> на фактический URL вашего репозитория на GitHub. Например:
git clone https://github.com/username/repository.git
Команда git clone создаст локальную копию репозитория на вашем компьютере.

После клонирования репозитория выполните команду
 cd <название папки проекта>, чтобы перейти в папку проекта.
  Замените <название папки проекта> на фактическое название папки, куда был склонирован репозиторий.
  Например:
cd repository
Теперь, чтобы переключиться на определенную ветку,
выполните команду git checkout <название ветки>.
Замените <название ветки> на фактическое название ветки, которую вы хотите проверить.
Например:
git checkout main
Если ветка находится на удаленном сервере, вы можете использовать команду
git checkout -b <название ветки> origin/<название ветки>,
чтобы создать локальную ветку и переключиться на нее. Например:
git checkout -b new_branch origin/new_branch
Теперь вы можете открыть проект в PyCharm,
выбрав опцию "Open" (Открыть) из меню "File" (Файл) и указав путь к папке проекта, которую вы только что склонировали.

После этого вы сможете работать с проектом в PyCharm, используя выбранную ветку из репозтория


Чтобы отправить изменения в удаленный репозиторий через командную строку в PyCharm, выполните следующие шаги:
Откройте терминал в PyCharm. Вы можете сделать это,
выбрав пункт меню "View" (Вид) -> "Tool Windows" (Окна инструментов) -> "Terminal" (Терминал).
Убедитесь, что ваш текущий рабочий каталог (working directory) в терминале соответствует корневому
каталогу вашего проекта Git. Если нет, перейдите в нужный каталог с помощью команды cd.
Для отправки изменений в удаленный репозиторий Git используйте команду
git push. Синтаксис команды следующий:
git push <remote_name> <branch_name>
Замените <remote_name> на имя удаленного репозитория, куда вы хотите отправить изменения.
 Обычно имя удаленного репозитория - "origin". <branch_name> замените на имя ветки, которую вы хотите отправить.
Пример использования команды для отправки изменений в удаленную ветку "main" на удаленный репозиторий "origin":
git push origin main
После выполнения команды Git отправит ваши изменения в удаленный репозиторий.
Если у вас есть соответствующие права доступа, изменения будут загружены в удаленный репозиторий.
Обратите внимание, что перед отправкой изменений рекомендуется убедиться,
 что ваш локальный репозиторий находится в актуальном состоянии.
  Вы можете использовать команду git pull для загрузки последних изменений
  из удаленного репозитория перед отправкой своих изменений.


Чтобы сначала закоммитить изменения, а затем отправить их в удаленный репозиторий через
 командную строку в PyCharm, выполните следующие шаги:
Откройте терминал в PyCharm. Вы можете сделать это, выбрав пункт меню
"View" (Вид) -> "Tool Windows" (Окна инструментов) -> "Terminal" (Терминал).
Убедитесь, что ваш текущий рабочий каталог (working directory) в терминале соответствует корневому каталогу
вашего проекта Git. Если нет, перейдите в нужный каталог с помощью команды cd.
Проверьте статус изменений в вашем локальном репозитории с помощью команды
git status. Она покажет вам список измененных файлов и неотслеживаемых файлов.
Добавьте измененные файлы в индекс с помощью команды git add.
Вы можете добавить все измененные файлы, используя точку, либо указать конкретные файлы. Например:
git add .  # добавить все измененные файлы в индекс
git add file1.txt file2.py  # добавить конкретные файлы в индекс
Сделайте коммит изменений с помощью команды git commit. Вы можете указать сообщение коммита с флагом -m. Например:
git commit -m "Сообщение коммита"
Замените "Сообщение коммита" на описание ваших изменений.
После коммита вы можете отправить изменения в удаленный репозиторий с помощью команды git push.
Синтаксис команды следующий:
git push <remote_name> <branch_name>
Замените <remote_name> на имя удаленного репозитория, куда вы хотите отправить изменения,
 и <branch_name> на имя ветки, которую вы хотите отправить.
Пример использования команды для отправки изменений в удаленную ветку "main" на удаленный репозиторий "origin":
git push origin main
После выполнения команды Git отправит ваши изменения в удаленный репозиторий.
Если у вас есть соответствующие права доступа, изменения будут загружены в удаленный репозиторий.
Таким образом, вы сначала закоммитите изменения в локальном репозитории, а затем отправите их в удаленный репозиторий.


Чтобы создать новую ветку, перейти в нее и начать в ней работать через терминал, выполните следующие команды:
Убедитесь, что вы находитесь в корневой папке вашего проекта. Если нет, перейдите в нужную папку с помощью команды cd.
Проверьте текущую ветку с помощью команды git branch.
Она отобразит список доступных веток, а текущая ветка будет выделена звездочкой.
Создайте новую ветку с помощью команды git branch и указания имени ветки. Например:
git branch my-new-branch
Замените my-new-branch на имя новой ветки, которую вы хотите создать.
Переключитесь на новую ветку с помощью команды git checkout и указания имени ветки. Например:
git checkout my-new-branch
Теперь вы находитесь в созданной вами новой ветке и можете начать работать в ней.
Если вы хотите объединить команды создания ветки и переключения на нее в одной команде,
 вы можете использовать команду git checkout с флагом -b. Например:
git checkout -b my-new-branch
Эта команда создаст новую ветку и автоматически переключится на нее.
Теперь вы можете выполнять изменения и коммиты в созданной вами новой ветке.
Когда вы закончите работу и захотите объединить изменения с другой веткой,
вы сможете выполнить операцию слияния (merge) или создать пул-реквест (pull request) для
 внесения изменений в основную ветку репозитория.

 Чтобы отправить локально созданную ветку в удаленный репозиторий, вам понадобится выполнить несколько шагов:
Убедитесь, что вы находитесь в созданной вами локальной ветке, в которой вы хотите работать.
Сначала убедитесь, что ваш локальный репозиторий знает о существовании удаленного
репозитория и связанного с ним имени (remote name).
Вы можете проверить список удаленных репозиториев с помощью команды git remote -v.
Если удаленный репозиторий еще не связан с вашим локальным репозиторием,
 добавьте его в качестве удаленного репозитория с помощью команды git remote add.
 Например:
git remote add origin <remote_repository_url>
Замените <remote_repository_url> на URL удаленного репозитория,
куда вы хотите отправить ветку. Обычно имя удаленного репозитория устанавливается как "origin".
После того, как удаленный репозиторий связан с вашим локальным репозиторием,
вы можете отправить вашу локальную ветку в удаленный репозиторий с помощью команды git push. Например:
git push origin <branch_name>
Замените <branch_name> на имя вашей локальной ветки, которую вы хотите отправить.
Команда git push отправит вашу локальную ветку в удаленный репозиторий.
Если ветка с указанным именем уже существует в удаленном репозитории,
она будет обновлена. Если же ветки с указанным именем нет в удаленном репозитории, она будет создана.


Чтобы подтянуть (загрузить) изменения с удаленного репозитория в ваш локальный репозиторий,
вы можете использовать команду git pull. Вот как это сделать:
Убедитесь, что вы находитесь в нужной ветке, в которую вы хотите подтянуть изменения.
Вы можете проверить текущую ветку с помощью команды git branch.
Запустите команду git pull, чтобы подтянуть изменения с удаленного репозитория.
По умолчанию, эта команда подтянет изменения из удаленной ветки, которая соответствует текущей локальной ветке. Например:
git pull
Команда git pull автоматически загрузит последние изменения из удаленного репозитория
и выполнит слияние (merge) с вашей локальной веткой.
Если вы хотите явно указать удаленный репозиторий и ветку,
из которых нужно подтянуть изменения, вы можете использовать следующий синтаксис:
git pull <remote_name> <branch_name>
Замените <remote_name> на имя удаленного репозитория, например,
 "origin", и <branch_name> на имя ветки, из которой нужно подтянуть изменения.
После выполнения команды git pull изменения из удаленного репозитория
будут загружены и объединены с вашей текущей локальной веткой.
Обратите внимание, что в процессе слияния могут возникнуть конфликты,
если есть несовместимые изменения. В таком случае, вам нужно будет разрешить конфликты вручную.

Основные команды ГИТ

git init: Эта команда создает новый репозиторий Git.
Она говорит Git'у, чтобы он начал отслеживать изменения в папке, в которой она выполняется. Например:
git init
Это создаст новый пустой репозиторий Git в текущей папке.

git clone: Команда git clone позволяет скопировать (клонировать) существующий репозиторий Git. Например:
git clone <repository_url>
Замените <repository_url> на URL репозитория, который вы хотите скопировать. Это создаст локальную копию репозитория на вашем компьютере.

git add: Команда git add добавляет файлы в индекс, чтобы они были готовы к коммиту (сохранению). Например:
git add file.txt
Это добавит файл file.txt в индекс для последующего коммита.

git commit: Команда git commit создает новый коммит, который сохраняет изменения в вашем репозитории. Например:
git commit -m "Добавил новую функцию"
Это создаст новый коммит с сообщением "Добавил новую функцию", который сохранит изменения в репозитории.

git push: Команда git push отправляет коммиты из вашего локального репозитория в удаленный репозиторий. Например:
git push origin main
Это отправит коммиты из локальной ветки main в удаленный репозиторий с именем origin.

git pull: Команда git pull загружает изменения из удаленного репозитория и объединяет их с вашим локальным репозиторием. Например:
git pull origin main
Это загрузит изменения из удаленной ветки main и выполнит слияние (merge) с вашей локальной веткой.

git branch: Команда git branch позволяет просматривать, создавать и удалять ветки в репозитории. Например:
git branch new-branch
Это создаст новую ветку с именем new-branch.

git checkout: Команда git checkout позволяет переключаться между ветками или восстанавливать файлы из предыдущих коммитов. Например:
git checkout main
Это переключит вас на ветку main.
git checkout -- file.txt
Это восстановит файл file.txt из последнего коммита.

git merge: Команда git merge объединяет изменения из одной ветки в другую. Например:
git merge new-branch
Это выполнит слияние изменений из ветки new-branch в текущую ветку.

git status: Команда git status показывает текущее состояние вашего репозитория,
включая неотслеживаемые файлы и изменения, ожидающие коммита. Например:
git status
Это покажет список измененных файлов и состояние репозитория.

git log: Команда git log позволяет просматривать историю коммитов в репозитории. Например:
git log
Это покажет список всех коммитов, начиная с самого нового.

git remote: Команда git remote позволяет просматривать и управлять удаленными репозиториями. Например:
git remote -v
Это покажет список удаленных репозиториев, связанных с вашим локальным репозиторием.

Это лишь несколько примеров основных команд Git.
С помощью этих команд вы можете создавать, изменять и совместно работать с репозиториями Git.

git stash: Команда git stash позволяет временно сохранить незаконченные изменения в отдельном хранилище (stash),
чтобы переключиться на другую ветку или применить другие изменения. Например:
git stash
Это сохранит текущие незаконченные изменения во временное хранилище.

git reset: Команда git reset позволяет отменить коммиты и изменить состояние вашего репозитория. Например:
git reset HEAD~1
Это отменит последний коммит и вернет ваш репозиторий к предыдущему состоянию.

git remote add: Команда git remote add добавляет новый удаленный репозиторий в ваш локальный репозиторий. Например:
git remote add origin <remote_repository_url>
Это связывает ваш локальный репозиторий с удаленным репозиторием с указанным URL.

git fetch: Команда git fetch загружает последние изменения из удаленного репозитория,
но не применяет их в вашем локальном репозитории. Например:
git fetch origin
Это загрузит последние изменения из удаленного репозитория origin.

git checkout -b: Команда git checkout -b создает новую ветку и переключает вас на нее. Например:
git checkout -b new-branch
Это создаст новую ветку с именем new-branch и переключит вас на нее.

git remote remove: Команда git remote remove удаляет связь с удаленным репозиторием из вашего локального репозитория. Например:
git remote remove origin
Это удалит связь с удаленным репозиторием origin.

git branch -d: Команда git branch -d удаляет указанную ветку из вашего локального репозитория. Например:
git branch -d branch-name
Здесь branch-name - это имя ветки, которую вы хотите удалить.

git push origin --delete: Команда git push origin --delete удаляет указанную ветку из удаленного репозитория. Например:
git push origin --delete branch-name
Здесь branch-name - это имя ветки, которую вы хотите удалить из удаленного репозитория.

git diff: Команда git diff показывает разницу между текущим состоянием вашего рабочего каталога и последним коммитом. Например:
git diff
Это покажет вам изменения, которые были внесены в файлы с момента последнего коммита.

git log: Команда git log позволяет просматривать историю коммитов в репозитории. Например:
git log
Это покажет вам список всех коммитов с информацией о каждом коммите, такой как автор, дата и сообщение коммита.

git config: Команда git config позволяет устанавливать и просматривать конфигурационные настройки Git. Например:
git config --global user.name "Your Name"
Это устанавливает ваше имя в конфигурации Git, которое будет использоваться при коммите.

git cherry-pick: Команда git cherry-pick позволяет применить изменения из одного коммита на другую ветку. Например:
git cherry-pick commit-hash
Здесь commit-hash - это идентификатор коммита, из которого вы хотите применить изменения.

git remote -v: Команда git remote -v показывает список удаленных репозиториев, связанных с вашим локальным репозиторием. Например:
git remote -v
Это покажет список всех удаленных репозиториев и их URL.